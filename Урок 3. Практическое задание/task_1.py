"""
Задание 1.

Реализуйте функции:

a) заполнение списка, оцените сложность в O-нотации (операции нужно проводить в цикле)
   заполнение словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени

b) получение элемента списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   получение элемента словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени

с) удаление элемента списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   удаление элемента словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени


ВНИМАНИЕ: в задании три пункта
НУЖНО выполнить каждый пункт
обязательно отделяя каждый пункт друг от друга

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
вы уже знаете, что такое декоратор и как его реализовать,
обязательно реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к своим функциям!
"""


from time import time


# Функция-декоратор, которая будет считать время исполнения
def how_much_time(func):
    def wrapper(*args, **kwargs):
        start = time()
        our_funct = func(*args, **kwargs)
        end = time()
        print(f'Время выполнения функции {func.__name__}: {end - start}')
        return our_funct

    return wrapper


# a) Функция, заполнения списка
@how_much_time
def fill_lst(lst, numbers):
    """
    Заполняет заданный список числами от 0 до numbers включительно\n
    :param lst: Заданный список
    :param numbers: Макимальное число
    :return: Возвращает заполненный список
    """
    for i in range(numbers + 1):
        lst.append(i)

    return lst


my_list = []
print(fill_lst(my_list, 100))
