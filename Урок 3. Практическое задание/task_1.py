"""
Задание 1.

Реализуйте функции:

a) заполнение списка, оцените сложность в O-нотации (операции нужно проводить в цикле)
   заполнение словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени

b) получение элемента списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   получение элемента словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени

с) удаление элемента списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   удаление элемента словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени


ВНИМАНИЕ: в задании три пункта
НУЖНО выполнить каждый пункт
обязательно отделяя каждый пункт друг от друга

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
вы уже знаете, что такое декоратор и как его реализовать,
обязательно реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к своим функциям!
"""


from time import time


def how_much_time(func):
    """
    Функция-декоратор, которая считает время исполнения декорируемой функции\n
    :param func: Декорируемая функция
    :return: Время выполнения в формате f-строки
    """
    def wrapper(*args, **kwargs):
        start = time()
        our_funct = func(*args, **kwargs)
        end = time()
        print(f'Время выполнения функции {func.__name__}: {end - start}')
        return our_funct

    return wrapper


# a)
# Функция, заполнения списка. Сложность O(1)
@how_much_time
def fill_list(lst: list, numbers: int):
    """
    Заполняет заданный список числами от 0 до numbers включительно\n
    :param lst: Заданный список
    :param numbers: Макимальное число
    :return:
    """
    for i in range(numbers + 1):
        lst.append(i)

    return True


my_list = []
fill_list(my_list, 100000000)


# Функция, заполнения словаря. Сложность O(1)
@how_much_time
def fill_dict(di: dict, numbers: int):
    """
    Заполняет словарь парами ключ-значение от 0 до заданного числа numbers включительно\n
    :param di: Заданный словарь
    :param numbers: Максимальное чило пар
    :return:
    """
    for i in range(numbers + 1):
        di[i] = i

    return True


my_dict = {}
fill_dict(my_dict, 100000000)


"""
Время выполнения функции fill_list: 2.9917619228363037
Время выполнения функции fill_dict: 7.632849931716919
Список заполняется быстрее, чем словарь. Это происходит потому что в словаре используется хэш-таблица
и нужно время на вычисление места. А в спискок просто в конец добавляется элемент
"""


# b)
# Получение элемента списка. Сложность: O(n)
@how_much_time
def get_elem_list(lst: list, n: int):
    """
    Получает n элементов списка\n
    :param lst: Заданный список
    :param n: Количество элементов
    :return:
    """
    elem = 0
    for i in range(n):
        elem = lst[i]
    return elem


get_elem_list(my_list, 1000)


# Получение элемента словаря. Сложность: O(1)
@how_much_time
def get_elem_dict(di: dict, n: int):
    """
    Получает n элементов словаря\n
    :param di: Заданный словарь
    :param n: Количество элементов
    :return val:
    """
    val = 0
    for i in range(n):
        val = di[i]
    return val


get_elem_dict(my_dict, 1000)


"""
Время выполнения функции get_elem_list: 3.5762786865234375e-05
Время выполнения функции get_elem_dict: 0.0003440380096435547
Получение элемента из словаря происходит намного быстрее, чем из списка. Так как словари работают на хэш-таблицах,
там все индексы известны заранее. А в списке нужно их рассчитывать.
"""


# c)
# Удаление элемента из списка
@how_much_time
def del_elem_list(lst: list, n: int):
    """
    Удаляет элемент из списка\n
    :param lst: Заданный список
    :param n: Количество удаляемых элементов
    :return lst:
    """
    for i in range(n):
        lst.pop(i)
    return lst


del_elem_list(my_list, 1000)


# Удаление элемента из словаря
@how_much_time
def del_elem_dict(di: dict, n: int):
    """
    Удаляет элемент из словаря\n
    :param di: Заданный словарь
    :param n: Количество удаляемых элементов
    :return di:
    """
    for i in range(n):
        di.pop(i)
    return di


del_elem_dict(my_dict, 1000)


"""
Время выполнения функции del_elem_list: 29.570566177368164
Время выполнения функции del_elem_dict: 7.104873657226562e-05
Удаление элемента из словаря происходит намного быстрее, чем из списка.
Так как сложность удаления непоследнего элемента из словаря O(1), а из списка - O(n).
"""
