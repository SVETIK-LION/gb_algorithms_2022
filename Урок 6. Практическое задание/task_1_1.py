"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для первого скрипта
"""


from memory_profiler import profile


# Урок 2, задание 3
# Исходная функция

number = 1234


@profile
def revers_num(num: int, result=''):
    """
    :param num: Число, которое нужно перевернуть
    :param result: Результат
    :return: Возвращает перевернутое число в формате строки
    """
    if num == 0:
        return f'Перевернутое число: {result}'
    else:
        digit = num % 10
        result += str(digit)
        num //= 10
        return revers_num(num, result)


print(revers_num(number))


# Опт
@profile
def revers_num_2(num: int, result=''):
    """
    :param num: Число, которое нужно перевернуть
    :param result: Результат
    :return: Возвращает перевернутое число в формате строки
    """

    while num != 0:
        digit = num % 10
        result += str(digit)
        num //= 10

    return f'Перевернутое число: {result}'


print(revers_num_2(number))


"""
Убрала рекурсию из функции, но почему-то занимает столько же места.
"""
