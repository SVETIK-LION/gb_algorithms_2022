"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для первого скрипта
"""


from memory_profiler import profile


# Исходная функция. Урок 2, задание 4
@profile
def sum_nums_line(n: int, elem: float, count: int, sum_numbers: float):
    if count == n:
        print(f'Сумма {n} элементов ряда равна: {sum_numbers}')
    else:
        return sum_nums_line(n, elem / 2 * (-1), count + 1, sum_numbers + elem)


try:
    n_elems = int(input('Введите количество элементов ряда(целое положительное число): '))
    sum_nums_line(n_elems, 1, 0, 0)
except ValueError:
    print('Неверное значение. Введите целое положительное число')


# Оптимизированная функция
@profile
def sum_nums_line_opt(amount_elems):
    elem = 1
    count = 0
    for i in range(amount_elems):
        count += 1
        elem = -elem / 2
    print(f'Сумма {amount_elems} элементов ряда равна: {count}')



try:
    n_elems = int(input('Введите количество элементов ряда(целое положительное число): '))
    sum_nums_line_opt(n_elems)
except ValueError:
    print('Неверное значение. Введите целое положительное число')
