"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для первого скрипта
"""


from memory_profiler import profile


# Урок 2, задание 2
# Исходная функция
@profile
def even_odd_counter_1(num: int, even=0, odd=0):
    """
    :param num: Число, которое Вы ввели для проверки
    :param even: Четные цифры
    :param odd: Нечетные цифры
    :return: Возвращает количество четных и нечетных цифр числа
    """
    if num == 0:
        print(f'Четных чисел: {even}. Нечетных чисел: {odd}')
    else:
        digit = num % 10
        if digit % 2 == 0:
            even += 1
        else:
            odd += 1
        num = num // 10
        return even_odd_counter_1(num, even, odd)


try:
    number = int(input('Введите целое число: '))
    even_odd_counter_1(number)
except ValueError:
    print(f'Неверные данные. Введите целое число')


# Оптимизированная функция
@profile
def even_odd_counter_2(num: int):
    """
    :param num: Число, которое Вы ввели для проверки
    :return: Возвращает количество четных и нечетных цифр числа
    """
    even = 0
    odd = 0
    while num != 0:
        digit = num % 10
        if digit % 2 == 0:
            even += 1
            num = num // 10
        else:
            odd += 1
            num = num // 10

    return f'Четных чисел: {even}. Нечетных чисел: {odd}'


try:
    number = int(input('Введите целое число: '))
    print(even_odd_counter_2(number))
except ValueError:
    print(f'Неверные данные. Введите целое число')


"""
Убрала рекурсию из функции, но почему-то занимает столько же места.
"""
