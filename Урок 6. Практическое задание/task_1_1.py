"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для первого скрипта
"""


from memory_profiler import profile


# Исходная функция
from collections import defaultdict
import functools


def hex_calc():
    """
    Возвращает сумму и произведение чисел в шестнадцатеричной системе\n
    :return:list
    """
    numbers = defaultdict(list)
    conver_nums = []

    digit_1 = input(f'Введите первое натуральное шестнадцатеричное число: ')
    digit_2 = input(f'Введите второе натуральное шестнадцатеричное число: ')
    numbers[digit_1] = list(digit_1)
    numbers[digit_2] = list(digit_2)

    for val in numbers.values():
        conver_digit = int(''.join(val), 16)  # Преобразуем в 10-ю систему
        conver_nums.append(conver_digit)

    sum_nums_10 = sum(conver_nums)
    mult_nums_10 = functools.reduce(lambda a, b: a * b, conver_nums)

    sum_nums_16 = list(hex(sum_nums_10).upper()[2:])    # Переводим обратно в 16-ю систему
    mult_nums_16 = list(hex(mult_nums_10).upper()[2:])

    return f'Сумма чисел: {sum_nums_16}\nПроизведение: {mult_nums_16}'






print(hex_calc())
